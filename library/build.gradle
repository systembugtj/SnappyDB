apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

group = 'com.snappydb'
version = '0.5.2'
ext.packaging = 'aar'
def artifact_id = 'snappydb-lib'
def sonatypeRepositoryUrl

android {
    compileSdkVersion 22
    buildToolsVersion '25.0.0'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 22
        versionCode 5
        versionName version
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = [] //disable automatic ndk-build call
    }

    buildTypes.debug.jniDebuggable false

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
        }
    }
}

dependencies {
    compile 'com.esotericsoftware:kryo:4.0.0'
    androidTestCompile('de.javakaffee:kryo-serializers:0.41') {
        transitive = false
        exclude group: 'com.esotericsoftware', module: 'kryo'
    }
}

if (isSnapshotBuild()) {
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"

} else {
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}


signing {
    sign configurations.archives
}

task androidJavadocs(type: Javadoc) {
    options {
        linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"

    }
    failOnError false
    source = "src/main/java"
    classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from "src/main/java"
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}


def isSnapshotBuild() {
    return version.contains("SNAPSHOT")
}

def getNdkPath () {
    System.env.ANDROID_NDK_HOME?:"/Android/sdk/ndk-bundle"
}

// call regular ndk-build script from app directory
task buildLevelDB(type: Exec) {
    commandLine "${getNdkPath()}/ndk-build", '-C', file('src/main/jni/').absolutePath
}
